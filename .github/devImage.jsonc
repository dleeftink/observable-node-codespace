// https://containers.dev/implementors/json_reference/
// https://code.visualstudio.com/docs/getstarted/settings#_default-settings
// https://github.blog/changelog/2022-10-26-codespaces-customizable-initial-experience/
// https://blog.siliconvalve.com/posts/2023/08/08/using-dev-containers-to-build-a-transportable-blog-writing-environment
// https://stackoverflow.com/questions/72194332/need-a-better-way-to-programmatically-clear-and-set-user-settings-in-vscode
// https://code.visualstudio.com/remote/advancedcontainers/start-processes
// https://github.com/orgs/community/discussions/9644#discussioncomment-2702122 | setting custom start-up message
// https://github.com/orgs/community/discussions/43534 | custom start-up message
// https://github.com/orgs/community/discussions/4068 | default public ports
// ~/.vscode-remote/data/Machine/settings.json

// When inlining bash scripts in json, always consider double escape \\\n vs single new line \n
// https://github.com/docker/for-win/issues/8479

{
  "name": "Observable Framework Alpine Node",
  "image": "mcr.microsoft.com/devcontainers/base:alpine-3.19",

  "features": {
    "ghcr.io/cirolosapio/devcontainers-features/alpine-node:0": {
      "globalPackages": "@devcontainers/cli" // remove in prod
    },
    "ghcr.io/cirolosapio/devcontainers-features/alpine-docker-outside-of-docker:0": {} // remove in prod
  },

  "remoteUser": "root", // run as root when creating image in case of d-o-d

  "remoteEnv": {
    "target_repo": "https://github.com/dleeftink/observable-node-codespace.git"
  },

  "forwardPorts": [
    3000
  ],
  "portsAttributes": {
    "3000": {
      "label": "Live preview",
      "onAutoForward": "openPreview"
    }
  },

  "onCreateCommand": "echo 'Please wait for live pane ...' | sudo tee /usr/local/etc/vscode-dev-containers/first-run-notice.txt",

  // Check if .devcontainer is the only folder, and if so, 
  // temporarily move the .devcontainer folders out of the way 
  // and clone template repository to root. Else assume contents
  // are available.

  // "updateContentCommand": "if [ $(find . -maxdepth  1 -type d ! -name . ! -name .devcontainer | wc -l) -eq 0 ];  then \n mv .devcontainer .. && git clone \"$target_repo\" . && rm -rf .devcontainer && git clean -f -f &&  mv ../.devcontainer . && exit  0 \n else \n echo Contents available && exit 0 \n fi",
  "updateContentCommand": "if [ $(find . -maxdepth  1 -type d ! -name . ! -name .devcontainer | wc -l) -eq 0 ];  then \n temp_dev=$(mktemp -d) \n mv .devcontainer \"$temp_dev\" \n git clone \"$target_repo\" . \n rm -rf .devcontainer \n git clean -f -f \n mv \"$temp_dev/.devcontainer\" . \n rm -rf \"$temp_dev/.devcontainer\" \n exit  0 \n else \n echo Contents available && exit 0 \n fi",

  // Additional postinstall commands are execute via package.json

  "waitFor": "updateContentCommand",
  "postCreateCommand": "npm install",

  "postAttachCommand": {
    "server": "code -r -g basic-template/docs/index.md:1 && npm run obs" // make .vscode > launch.json available via repo
  },

  "customizations": {
    "vscode": {
      "extensions": [
        "ms-azuretools.vscode-docker"
      ]
    }
  }

}
